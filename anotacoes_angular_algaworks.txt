-> Para remover uma versão antiga do Angular CLI:
> [sudo] npm unistall -g @angular/cli
-> Limpar o cache local da máquina
> npm cache clean
-> Para instalar o angular CLI:
> [sudo] npm install -g @angular/cli
-> Para criar um novo projeto:
> ng new meuprojeto
-> Para rodar o servidor local na porta localhost:4200
> ng serve
-> Para rodar em uma porta diferente da 4200:
> ng serve --port 8181
-> Ao baixar um projeto Angular do git, é preciso primeiro rodar o comando 
npm install para instalar as dependências (node_modules)
-> Ao criar um novo projeto com ng new, o cli já executa o npm install
-> @NgModule - É um decorator que indica que é um módulo do Angular
-> declarations: [] - Declara classes de visualização (Componentes, Diretivas, Pipes) que pertencem ao módulo.
-> imports: [] - Importa outros módulos que o módulo atual depende
-> providers: [] - Define provedores de serviços
-> bootstrap: [] - Define o componente principal
-> No main.ts é indicado qual módulo deve iniciar a aplicação:
  platformBrowserDynamic().bootstrapModule(AppModule)
  
*** 9.2 - O que são componentes ***
-> Uma aplicação Angular é uma combinação de componentes
-> Cada componente tem o seu template html, estilos css, seletor e a sua lógica de negócio
-> Os componentes são importantes por serem reutilizáveis

*** 9.3 - Criando um componente ***
> export class HelloComponent {}
> @Component
> import { Component } from '@angular/core';
-> Para usar este componente, precisa declará-lo dentro do declarations do AppModule
-> Para crirar um componente usando o CLI:
> ng generate component bem-vindo
ou
> ng g c bem-vindo
-> Para criar sem o arquivo spec:
>ng g c bem-vindo --spec=false

*** 9.4 - Instalando a biblioteca CSS do Bootrstrap ***
> npm install bootstrap --save
> "./node_modules/bootstrap/dist/css/bootstrap.min.css"

*** 9.5 Introdução a data binding ***
-> Data bind é a forma de vincularmos o componente com o template e vice-versa

1 - Interpolação:
  {Component} --> {{ valor }} --> <Template> 
  
2 - Property Binding:
  {Component} --> [property]="valor" --> <Template>
  
3 - Event Binding:
  {Component} <-- (evento)="handler" <-- <Template>
  
4 - Two Way Data Binding:
 {Component} --> [(ngModel)]="property" --> <Template>
 
OBS: Aparentemente na versão 8 do Angular é necessário importar o FormsModule para qualquer tipo 
  de data binding funcionar. ???????
import { FormsModule } from '@angular/forms';
 
*** 9.6 - Usando interpolação ***
-> Nós usamos interpolação de strings para adicionar no meio do html algum resultado calculado
  através de uma expressão de template ou o valor de alguma propriedade do componente
  
*** 9.7 - Usando Event binding ***
>  <button (click)="adicionarFuncionario()" type="button" class="btn btn-primary">Adicionar</button>
> <input id="nome" type="text" class="form-control" (input)="alterarNome($event)">
> alterarNome(evento: any) {
    this.nome = evento.target.value;
  }
-> Outra opção:
> <input id="nome" type="text" class="form-control" (input)="nome = $event.target.value">
  
*** 9.8 Usando variável de referência ***
> <input id="nome" type="text" class="form-control" #nomeInput>
> <button (click)="adicionarFuncionario(nomeInput.value)">Adicionar</button>
-> A variável de referência representa o próprio elemento DOM (O input neste caso).
-> É equivalente a $event.targrt

*** 9.9 - Usando property binding ***
-> É um outro tipo de data binding que permite vincular propriedades do componente ou expressões typescript 
  às propriedades dos elementos do template.
> <input id="nome" type="text" class="form-control" [value]="nome">  
> <button [disabled]="!nome.length">Adicionar</button>

*** 9.10 - Usando two-way data binding ***
> <input id="nome" type="text" class="form-control" [(ngModel)]="nome">
-> Para utilizar o ngModel precisa adicionar o FormsModule (Versão 4?)

*** 9.11 - Introdução às diretivas ***
-> Diretivas são fundamentais em aplicações Angular
-> São instruções que passamos nos templates
-> Existem três categorias de diretivas no Angular:
* Componentes:
  -> Componente é um tipo de diretiva, porém com template:
  -> Ex: <lista-pessoas></lista-pessoas>
  
* Diretivas Estruturais:
  -> Modificam a estrutura do DOM adicionando ou removendo elementos.
  -> Ex: <h2 *ngIf="logado">Olá {{ nomeUsuario }}</h2>
  
* Diretivas de Atributos:
  -> Modifica o comportamento ou a aparência do elemento.
  -> Exs: <h2 [style.color]="'red'">Olá {{ nomeUsuario }}</h2>
         <h2 atencao>Olá {{ nomeUsuario }}</h2>
  
*** 9.12 - Exibindo condicionalmente com as diretivas ngIf e hidden ***
-> Quando a diretiva é uma diretiva estrutural, é exigido o * antes do nome da diretiva
> <div *ngIf="adicionado">Usuário {{ nome }} adicionado.</div>
-> No caso da diretiva estrutural, o elemento é realmente removido/adicionado do DOM
> <div [hidden]="!adicionado">Usuário {{ nome }} adicionado.</div>
-> Ao utilizar uma diretiva de atributo, o elemento não é removido, apenas o seu comportamento 
  muda. (display:none)
-> Neste caso, o código continua disponível pelo inspect, portanto é preciso tomar cuidado com informações sensíveis
-> Por outro lado, por alterar a estrutura do DOM, a diretiva *ngIf é mais custosa

*** 9.13 - Iterando com a diretiva ngFor ***
>   <div class="col-2" *ngFor="let funcionario of funcionarios">
	  <div class="card">
		<img class="card-img-top" src="https://randomuser.me/api/portraits/men/{{funcionario.id}}.jpg" alt="Card image cap">
		<div class="card-body">{{ funcionario.nome }}</div>
	  </div>
	</div>
	
-> Atenção à sintaxe: let funcionario of funcionarios

*** 9.14 - Binding de propriedades customizadas com @Input ***
-> Criar um novo componente chamado funcionario-card
> ng g c funcionario-car --spec=false
-> Colocar o trecho do card dentro do html do novo componente:
> <div class="card">
	<img class="card-img-top" src="https://randomuser.me/api/portraits/men/{{funcionario.id}}.jpg" alt="Card image cap">
	<div class="card-body">{{ funcionario.nome }}</div>
  </div>
-> Criar uma propriedade funcionario dentro do novo compoente e expô-la através do @Input()
> @Input() funcionario: any;
-> Utilizar o seletor do novo componente passando o valor da propriedade funcionario:
> <div class="col-2" *ngFor="let f of funcionarios">
	<app-funcionario-card [funcionario]="f"></app-funcionario-card>
  </div>
-> É possível mudar o nome da propriedade passando um alias:
> @Input('func') funcionario: any;
> <app-funcionario-card [func]="f"></app-funcionario-card>


*** 9.15 - Bind de eventos customizados com @Output e EventEmitter ***
-> Criar um novo componente funcionario-form:
> ng g c funcionario-form
-> Copiar todo o conteúdo do componente app.componente para o novo componente
-> Copiar o conteúdo html do form para o html do novo componente
-> Adicionar um emissor de eventos no novo componente:
> @Output() funcionarioAdicionado = new EventEmitter();
-> OBS: ImportarEventEmitter do pacote @angular/core
-> Emitir o evento ao adicionar um funcionario:
> this.funcionarioAdicionado.emit(funcionario);
-> Declarar o array de funcionarios no app.componente
-> Criar um método para ser chamado pelo evento e adicionar o funcionario:
> aoAdicionar(funcionario) {
    this.funcionarios.push(funcionario);
  }
-> Na utilização do novo componente, ouvir a emissão do evento e chamar o novo método:
> <app-funcionario-form (funcionarioAdicionado)=aoAdicionar($event)></app-funcionario-form>

*** 9.16 - Adicionando estilos CSS em componentes ***
-> stylesUrls: Recebe um array de arquivos css
-> styles: Recebe um array de stilos css:
> styles: [
    `
      .card-body {
        text-transform: uppercase;
        color: blue;
      }
    `
  ]
  
*** 9.17 - Estilos CSS dinâmicos com ngStyle ***
-> ngStyle é uma diretiva e não uma propriedade html, por isso precisa ser declarada assim: [ngStyle]=""
-> Deve receber um objeto JavaScript com as propriedades css
> [ngStyle]="getEstilosCartao()"
> getEstilosCartao() {
    return { 
      'border-width.px': this.funcionario.id,
      backgroundColor: this.funcionario.id % 2 == 0 ? 'lightblue' : 'lightgreen' 
    }
  }
  
*** 9.18 - Classes CSS dinâmicas com ngClass ***
> <span [ngClass]="['badge', 'badge-primary']">
> <span class="badge" [ngClass]="{ 'badge-secondary': isAdmin(), 'badge-primary': !isAdmin()}">{{ funcionario.nome }}</span>


*** 10.1 - Instalando plugins úteis no Visual Studio Code ***
-> Para executar o tslint:
> node_modules/tslint/bin/tslint --project tslint.json
-> Porém no Angular 8 o cli já cria um script ng lint
> ng lint
-> Adicionar a extensão TSLint para já rodar o TSLint ao compilar o projeto
-> Instalar a extensão do EditorConfig para configurar tabs, espaços, adicionar new line, etc
-> Instalar a extensão HTML Snippets
-> Instalar a extensão Auto Import

*** 10.2 - Escolhendo uma biblioteca de componentes ***
-> Angular Materialize
-> Angular3 Materialize
-> Ng Bootstrap
-> PrimeNG

*** 10.3 - Criando o projeto do curso e instalando o PrimeNG ***
-> Criar o projeto do curso:
> ng new algamoney-ui
-> Instalar o PrimeNG:
> npm install primeng --save 
-> Instalar o primeicons (substitui font awesome)
> npm install primeicons --save
-> Testando o PrimeNG com o componente tabView
-> Copiar o conteúdo da documentação:
-> https://www.primefaces.org/primeng/#/tabview
-> Adicionar o conteúdo no app.component.html
-> Importar o TabViewModule dentro do app.module.ts:
> import {TabViewModule} from 'primeng/tabview';
-> Precisa importar o módulo para cada componente que for utilizar.

*** 10.4 - Adicionando o formulário de pesquisa de lançamentos ***
-> 

*** 10.5 - Adicionando uma tabela de dados ***
-> Instalar a dependência que o p-table irá utilizar:
> npm install @angular/cdk --save

-> Maneira anterior de utilizar o p-dataTable:
<p-dataTable [value]="lancamentos">
  <p-column field="pessoa" header="Pessoa"></p-column>
  <p-column field="descricao" header="Descrição"></p-column>
  <p-column field="dataVencimento" header="Vencimento" styleClass="col-data"></p-column>
  <p-column field="dataPagamento" header="Pagamento" styleClass="col-data"></p-column>
  <p-column field="valor" header="Valor" styleClass="col-valor"></p-column>
</p-dataTable>

-> Utilizando p-table no Angular 8:
<p-table [value]="lancamentos">
  <ng-template pTemplate="header">
	<tr>
		<th>Pessoa</th>
		<th>Descricao</th>
		<th class="col-data-header">Vencimento</th>
		<th class="col-data-header">Pagamento</th>
		<th class="col-valor-header">Valor</th>
	</tr>
  </ng-template>
  <ng-template pTemplate="body" let-lancamento>
	  <tr>
		  <td>{{lancamento.pessoa}}</td>
		  <td>{{lancamento.descricao}}</td>
		  <td class="col-data-content">{{lancamento.dataVencimento}}</td>
		  <td class="col-data-content">{{lancamento.dataPagamento}}</td>
		  <td class="col-valor-content">{{lancamento.valor}}</td>
	  </tr>
  </ng-template>
</p-table>		

*** 10.6 - Customizando colunas com o ng-template ***
-> Como fazer nas versões mais antigas:
<p-column field="valor" header="Valor" styleClass="col-valor">
  <ng-template let-lanc="rowData" pTemplate="body">
	<span [style.color]="lanc.tipo === 'DESPESA' ? 'red' : 'blue'">{{lanc.valor}}</span>
  </ng-template>
</p-column>

-> Como o Angular 8 já trabalho com template fica mais simples:
<td class="col-valor-content" [style.color]="lancamento.tipo === 'DESPESA' ? 'red' : 'blue' ">{{lancamento.valor}}</td>

*** 10.7 - Fazendo paginação de dados ***
-> A paginação não mudou das versões mais antigas para a versão 8
<p-table [value]="lancamentos" [paginator]="true" [rows]="5">

*** 10.8 - Adicionando tooltip ***
<a pButton icon="pi pi-pencil" pTooltip="Editar" tooltipPosition="top"></a>

*** 10.9 - Colocando a tabela de dados responsiva ***
-> Devemos adicionar [responsive]="true"
<p-table [value]="lancamentos" [paginator]="true" [rows]="5" [responsive]="true">

*** 10.10 - Criando o componente de pesquisa de lançamentos ***
-> Criar o novo componente:
> ng g c lancamentos-pesquisa --spec=false
-> Copiar o conteudo html e do component do app para o novo component
-> Adicionar o seletor do novo componente no app.component.html

*** 10.11 - Criando o componente de barra de navegação ***
-> Criar o componente:
> ng g c navbar --spec=false
-> Adicionar o seletor no app.component.html
-> Adicionar o conteúdo abaixo:
<nav class="navbar">
  <div class="container">
    <div class="ui-g">
      <div class="ui-g-12">
        <a href="javascript:;" class="navbar-toggle"><i class="pi pi-bars"></i></a>
      </div>
    </div>
  </div>
</nav>
-> OBS: href="javascript:;" indica que não deve executar nenhuma ação ao clicar no link

*** 10.12 - Adicionando menu intercambiável ***
<ul class="navbar-menu" [hidden]="!exibindoMenu">
  <li class="navbar-usuario">José da Silva</li>
  <li class="navbar-menuitem"><a href="#">Lançamentos</a></li>
  <li class="navbar-menuitem"><a href="#">Pessoas</a></li>
  <li class="navbar-menuitem"><a href="#">Logout</a></li>
</ul>

-> Classes css estão no arquivo navbar.componente.css
.navbar {
  padding: 10px 0;
  background-color: #1e94d2;
}

.navbar-toggle {
  color: #fff;
}

.navbar-menu {
  position: fixed;
  top: 0;
  bottom: 0;
  right: 0;
  width: 210px;
  margin: 0;
  z-index: 9998;
  padding: 0;

  background-color: #3a3633;

  list-style: none;
}

.navbar-usuario {
  padding: 15px;
  margin-bottom: 15px;
  border-bottom: 1px solid #525151;

  text-transform: uppercase;
  font-weight: bold;
  color: #fff;
}

.navbar-menuitem {
  padding: 15px;
}

.navbar-menuitem a {
  color: #c0bbb7;
  text-decoration: none;
}

.navbar-menuitem a:hover {
  color: #fff;
}

-> Ação para exibir/ocultar o menu:
 <a href="javascript:;" class="navbar-toggle" (click)="exibindoMenu = !exibindoMenu"><i class="pi pi-bars"></i></a>
 
 
*** 11. 1 - Criando diretivas customizadas ***
-> Criar uma nova diretiva:
> ng g d campo-colorido --spec=false
-> Uma diretiva deve conter o decorator @Directive com os seus metadados
@Directive({
  selector: '[appCampoColorido]'
})
-> O valor do seletor entre colchetes indica que é um seletor de atributos
-> ElementRef é um objeto que dá acesso ao elemento hospedeiro da DOM
-> Renderer2 é um serviço nativo do Angular que fornece uma abstração para manipular renderizações
constructor(
    private elementRef: ElementRef,
    private renderer: Renderer2
  ) {
    this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'yellow');
  }
-> ElementRef é uma abstração para acessar os elementos do DOM, 
  o nativeElement é o elemento do DOM em si (input, label, table, etc)
<input id="nome" type="text" class="form-control" [(ngModel)]="nome" #nomeInput
    (focus)="adicionado = false" appCampoColorido>
-> É importante prefixar o nome do seletor para evitar conflitos de nomes
-> É possível usar como seletor qualquer elemento html, neste caso não é preciso utilizar a diretiva como atributo
-> Porém é recomendando usar as diretivas com seletores de atributos

*** 11.2 - Respondendo a eventos do hospedeiro com @HostListener ***
-> O decorator @HostListener permite escutar eventos que ocorrerem no elemento hospedeiro
@HostListener('focus') aoGanharFoco() {
	this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'yellow');
}
 
@HostListener('blur') aoPerderFoco() {
	this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'transparent');
}

*** 11.3. Vinculando propriedades do hospedeiro com @HostBinding ***
-> O decorator @HostBinding permite acessar/alterar propriedades do hospedeiro
@HostBinding('style.backgroundColor') corDeFundo: string;
-> Atenção: É style.backgroundColor e não style.background-color

*** 11.4. Usando property binding em diretivas customizadas ***
-> Para receber um valor de uma propriedade como entrada de uma diretiva usamos @Input
@Input() cor = 'gray';
<input appCampoColorido cor="pink">
ou então
<input appCampoColorido [cor]="'pink'">
-> Atenção: Se utilizar [], precisa passar o valor entre '' para o angular entender que é um valor literal e não uma propriedade.
-> Colocar [] ajuda a identificar que é um bind da diretiva e não uma propriedade do próprio elemento
-> É possível passar o valor do atributo da seguinte forma:
<input [appCampoColorido]="'pink'">
-> Para isto, é necessário adicionar um alias ao atributo, com o mesmo nome da diretiva:
@Input('appCampoColorido') cor = 'gray';
-> Neste caso o valor precisa ser passado entre ''


*** 11.5. Exportando a API da diretiva para o template ***
-> A ideia e conseguir chamar os métodos da diretiva a partir de um local que não use a diretiva
-> Adicionar o atributo exportAs nos metadados da diretiva:
@Directive({
  selector: '[appCampoColorido]',
  exportAs: 'campoColorido'
})
-> Declarar uma variável local e atribuir o valor do exporAs no elemento que usa a diretiva:
<input [appCampoColorido]="'green'" #campo="campoColorido">
-> Chamar os métodos da diretiva através da variável local:
<button class="btn btn-info" (click)="campo.colorir()">Colorir</button>
<button class="btn btn-info" (click)="campo.descolorir()">Descolorir</button>
-> Atenção: Os métodos colorir e descolorir são os mesmo chamados através do decorator @HostListener

*** 11.6. Conhecendo e usando pipes ***
-> Alguns pipes nativos do Angular:
* lowercase
* uppercase
* date
* number
* currency
* json

*** 11.7. Passando parâmetros para pipes ***
-> DatePipe
{{ dataAniversario | date:'dd/MM/yyyy' }}
-> DecimalPipe
{{ valor number:'10.4-4' }} // Preenche com 10 números inteiros e com mínimo e máximo de 4 números decimais
-> CurrencyPipe
{{ troco | currency:'BRL':true:1.2-2 }}


*** 12.1. Introdução aos formulários ***
-> O Angular cria um object javascript representando o formulário
-> Uma propriedade importante deste javascript é a propriedade value
-> Existem duas formas de trabalhar com formulário no Angular:
  -> Template-Driven: O formulário é configurado no próprio html
  -> Reactive Form (Model-Driven): Ainda é feito em html, mas a inplementação é feita nas classes de componentes.
  
*** 12.2. Template-driven Forms: Criando um formulário ***
-> Quando adicionamos o módulo FormsModule, passamos a tag <form> passa a ser tratada como uma diretiva do Angular
-> Caso seja necessário que o Angular não gerencie o form, deve-se adicionar a diretiva de atributo ngNoForm na diretiva form
-> É possível capturar a submissão do formulário através do event bind ngSubmit
-> Podemos passar o formulario através de uma variável local apontando para o objeto ngForm:
<form #usuarioForm="ngForm" (ngSubmit)="salvar(usuarioForm)">
-> O método salvar vai receber uma instância do tipo NgForm:
salvar(form: NgForm) { }

*** 12.3. Registrando os controles do formulário ***
-> Agora será necessário registrar os controles dentro do ngForm
-> Quando adicionamos a diretiva ngModel a um campo, o Angular irá instanciar um objeto do tipo FormControl 
  e vincular ao objeto NgForm
-> Ao utilizarmos a diretiva ngModel, o campo do formulário precisa ter um atributo name definido. 
  Este name será o nome do controle dentro do NgForm
<input type="text" class="form-control" name="nome" ngModel>

*** 12.4. Adicionando opções dinâmicas no campo de seleção ***
<option *ngFor="let profissao of profissoes"
          [value]="profissao">{{profissao}}</option>
		  
*** 12.5. Definindo o valor padrão em campos com ngModel ***
> [ngModel]="'Engenheiro'"
> [ngModel]="profissao"
-> Desta segunda forma (one-way) o valor selecionado no formulário não será refletido na variavel profissao

*** 12.6. Two-way binding com ngModel ***
-> Criar uma classe de modelo:
class Cliente {
  nome: string;
  email: string;
  profissao: string;
}
-> Fazer o two-way-data binding:
<input type="text" class="form-control" name="nome" [(ngModel)]="cliente.nome">
-> Exibir o cliente como json:
{{ cliente | json }}

*** 12.7. Adicionando validação em formulários ***
-> Adicionar o atributo required.
-> O atributo required é do html, mas como os fomulário está sendo gerenciado pelo Angular,
  ele adiciona uma validação de obrigatoriedade para este campo
-> Alguns exemplos de validação:
<input type="text" name="nome" [(ngModel)]="cliente.nome" required minlength="5">
<input type="text"  name="email" [(ngModel)]="cliente.email" required email>

-> Desabilita o botão se o formulário não for válido:
<button type="submit" class="btn btn-primary" [disabled]="!usuarioForm.valid">Salvar</button>

-> Validadores do Angular:
* CheckboxRequired
* minlength
* email
* pattern
* maxlength
* required

*** 12.8. Exibindo erro de validação do formulário ***
-> Para desabilitar o auto complete:
<form autocomplete="off" #usuarioForm="ngForm" (ngSubmit)="salvar(usuarioForm)">
-> Adicionando mensagem de validação quando o formulário não está válido:
<div *ngIf="usuarioForm.invalid" class="alert alert-danger">
	Preencha todos os campos corretamente
</div>

*** 12.9. Exibindo erro de validação de controles do formulário ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/84a7e6ed242b30c0ab004923772259fd8d741939

-> Para validar se um campo é válido ou inválido:
<input name="nome" [(ngModel)]="cliente.nome" required minlength="5" #nome="ngModel">
<div class="alert alert-danger" *ngIf="nome.invalid">Informe um nome válido</div>

-> Para fazer a validação or tipo de erro:
<div class="alert alert-danger" *ngIf="nome.hasError('required')">Informe um nome</div>
<div class="alert alert-danger" *ngIf="nome.hasError('minlength')">O nome deve ser completo</div>

*** 12.10. Rastreando o estado em controles do formulário ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/943b0c32bb8ef0328ed54a22db14c7b573705787

-> Touched: O campo já foi tocado 
-> Pristine: Está puro, intacto, não foi alterado
-> Dirty: O campo já foi mexido
<div *ngIf="usuarioForm.invalid && usuarioForm.dirty" class="alert alert-danger">
 <div class="alert alert-danger" *ngIf="nome.hasError('required') && nome.touched">Informe um nome</div>


*** 12.11. Estilizando os campos inválidos com classes CSS do Angular ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/93a69a5a1a2f21f079b703877b494b2ca4a93383

-> Os controllers que estão sendo gerenciados pelo formulário, eles não só têm um estado,
  mas eles também recebem uma classe css especial do Angular de acordo com o seu estado.
input.ng-invalid.ng-touched, select.ng-invalid.ng-touched {
  border: 1px solid red
}

*** 12.12. Estilizando os campos inválidos com Bootstrap ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/149500940f4b2a488f12caf7f785cb525fe30e54

-> Atenção: Atualizar a versão do bootstrap:
$ npm uninstall bootstrap (desinstala)
e instala essa
$ npm install bootstrap@4.0.0-alpha.6

<div class="form-group" [class.has-danger]="nome.invalid && nome.touched">

*** 12.13. Limpando formulários (reset) ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/ce3862b2dc8ebb391e555776bf55b3b906f4417e

-> Para limpar o formulário:
 form.reset({ profissao: '' });
 
*** 13.1. Criando o protótipo do formulário de cadastro de lançamentos ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/b1939a9bac959a6dc16e65794fea1e7bbaed7963

> ng g c lancamento-cadastro --spec=false

*** 13.2. Adicionando seletor de data (componente Calendar) ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/ea31b088a4ea409293759e58ce9b52445421f560

<p-calendar dateFormat="dd/mm/yy" 
[inline]="false" [readonlyInput]="false"
[showIcon]="false"></p-calendar>

*** 13.3. Adicionando botão de seleção ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/15dccc40fb202b88c9c9739aff6636ebed09ce59

<p-selectButton [options]="tipos" #tipo></p-selectButton>

tipos = [
	{ label: 'Receita', value: 'RECEITA'},
	{ label: 'Despesa', value: 'DESPESA'}
];

*** 13.4. Adicionando caixa de seleção (componente Dropdown) ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/4b9257fe5395646770208db703d78faa1cfb27c6

<p-dropdown [options]="pessoas" [filter]="true" placeholder="Selecione"></p-dropdown>

pessoas = [
    { label: 'João da Silva', value: 4 },
    { label: 'Sebastião Souza', value: 9 },
    { label: 'Maria Abadia', value: 3 },
  ];
  
*** 13.5. Adicionando máscara de dinheiro com ng2-mask-money ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/e00a4888d706d64b975477beab91ff3fa93e361e

-> Instalar a dependência do ng2-currency-mask:
https://www.npmjs.com/package/ng2-currency-mask
$ npm install ng2-currency-mask --save

<input pInputText type="text" placeholder="0,00" currencyMask
    [options]="{ prefix: '', thousands: '.', decimal: ',', allowNegative: false }">

*** 13.6. Desafio: criando o protótipo do formulário de cadastro de pessoa ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/aa753a0b65bf722cab9f6bab039d6423a97ce80c

*** 13.7. Adicionando campo com máscara (componente InputMask) ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/5af73a1f879379f0fc4cdc9bc728e88c9fa99b74

import {InputMaskModule} from 'primeng/inputmask';

<label>CEP</label>
<p-inputMask mask="99.999-999"></p-inputMask>

*** 13.8. Validando controles de formulário com PrimeNG ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/04f05c4fdc81c9edba969640e8dfbc0dd492b86f

<div class="ui-g-12 ui-md-9 ui-fluid">
	<label>Descrição</label>
	<input pInputText type="text" name="descricao" 
		ngModel #descricao="ngModel" required minlength="5">

	<div *ngIf="descricao.hasError('required') && descricao.dirty" 
		class="ui-messages ui-messages-error">
		Informe uma descrição
	</div>

	<div *ngIf="descricao.hasError('minlength') && descricao.dirty" 
		class="ui-messages ui-messages-error">
		Mínimo de {{ descricao.errors.minlength.requiredLength}} caracteres. Você digitou apenas {{ descricao.errors.minlength.actualLength}}.
	</div>
</div>

*** 13.9. Criando componente de mensagem de erro de validação ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/9f7d6474fab56fc645ce079cd2b8bc2c0ce44007

$ ng g c message --spec=false --inline-template --inline-style

-> Dentro de lancamento.cadastro.component.html
<app-message [control]="descricao" error="required"
     text="Informe uma descrição"></app-message>

-> Dentro do novo componente:
@Component({
  selector: 'app-message',
  template: `
    <div *ngIf="temErro()" 
      class="ui-messages ui-messages-error">
      {{ text }}
    </div>
  `,
  styles: []
})
export class MessageComponent {

  @Input() error: string;
  @Input() control: FormControl;
  @Input() text: string;

  temErro(): boolean {
    return this.control.hasError(this.error) && this.control.dirty;
  }

}

*** 13.10. Desafio: controles, validações e mensagens de erro ***
Commit: 

*** 14.1. Introdução aos módulos ***

-> Para que um componente possa ser utilizado por outro módulo, o módulo onde ele foi declarado precisa exportar este componente
  e o módulo que deseja usar o componente precisa importar o módulo do componente.


*** 14.2. Criando um módulo e exportando um componente *** 
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/46bc4004681aa42d83ce5552b929ff01fb38dead

-> Criação de um novo módulo botoes:
$ ng g m botoes

-> Ao criar um novo módulo, importamos o CommonModule que possui as diretivas básicas como ngIf, ngFor, etc.
-> O BrowserModule importa internamente o CommonModule e reexporta este módulo.
-> Criar o componente botao-grande dentro do módulo botoes:
$ ng g c botoes/botao-grande --spec=false

@NgModule({
  declarations: [
    BotaoGrandeComponent
  ],
  imports: [
    CommonModule
  ],
  exports: [
    BotaoGrandeComponent
  ]
})
export class BotoesModule { }


@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    BotoesModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

*** 14.3. Reexportando um módulo ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/aa9ff412962b252e5a2e8984921d2c4924f38ae1

-> O módulo NavegacaoModule reexporta o módulo BotoesModule:
@NgModule({
  declarations: [
    MenuComponent
  ],
  imports: [
    CommonModule,
    BotoesModule
  ],
  exports: [
    MenuComponent,
    BotoesModule // Reexporta o BotoesModule
  ]
})
export class NavegacaoModule { }

*** 14.4. Criando um componente interno do módulo ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/cd980068b15788b3092fc910a678c8ad2eaa02b9

-> Para que um componente seja interno ao módulo, basta não exportá-lo

*** 14.5. O que são Feature Modules? ***

-> Um feature module é um módulo que acomoda elementos de uma mesma funcionalidade do sistema

*** 14.6. Criando um Feature Module ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/f215e863066ee728ce181db7315c8474a4a77927


*** 14.7. Desafio: criando o feature module de pessoas ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/1915489bb5beb0a0cfeb13f72f57c57408fa8905

*** 14.8. O que são Shared Modules? *** 

-> São módulos que contém componentes que podem ser comparilhados entre os demais módulos da aplicação.

*** 14.9. Criando um Shared Module ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/a9e17eaa45b752e3946f9e5a40f051ceb963a678

*** 14.10. O que é Core Module? ***

-> Elementos que são utilizados apenas no módulo raiz da aplicação devem ser colocados dentro de um core module.

*** 14.11. Desafio: criando o Core Module ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/e6c1ef46ba6bb6ddfdb2bc66a4330c56dfb8f479


*** 15.1. Introdução aos serviços ***

-> Um serviço é utilizado quando uma funcionalidade em comum precisa ser fornecida para vários componentes ou módulos
-> A criação de serviços deixa o código dos componentes mais limpos e mais focados em controlar a view enquanto que 
  os serviços ficam mais focados nas regras de negócios, gerenciamento de dados, comunicação com apis externas, etc.
  
*** 15.2. Implementando um serviço ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/ff27e1feda211099321358627e2f9f162d53c312

*** 15.3. O que é injeção de dependências? ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/c7fc06161da036cc23f56d781d6296e16d834d87

*** 15.4. Configurando o injetor com provider por classe ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/1b99240886114e18104f1ebd5432eabc38d18af0

export class FuncionarioAbreviadoService extends FuncionarioService {
    adicionar(funcionario) {
        funcionario['nome'] = funcionario['nome'].substr(0, 3)  + '...'
        super.adicionar(funcionario);
    }
}

providers: [
    { provide: FuncionarioService, useClass: FuncionarioAbreviadoService}
]

*** 15.5. Configurando o injetor com provider por fábrica ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/ca0a9a963ee4e30c4ddfbd6daec704da03470f45

const criarFuncionarioService = () => {
  return new FuncionarioAbreviadoService(2);
}

providers: [
    { provide: FuncionarioService, useFactory: criarFuncionarioService }
]

*** 15.6. Configurando o injetor com provider por valor e o decorator @Inject ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/be90f6630fb96e73f75949dc0d630160d436636f

export class LogService {

    constructor(@Inject('LogPrefixo') private prefixo: string) { }

    log(msg: string) {
        console.log(`${this.prefixo}: ${msg}`);
    }
}

providers: [
    LogService,
    { provide: 'LogPrefixo', useValue: 'LOG'}
  ]

*** 15.7. Injetando serviços dentro de serviços e o decorador @Injectable ***
 Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/a0b5a20b6ea264ca350e1484509b7814df72c409 

-> O decorator @Injectable deve ser usado na classe que vai receber algum valor injetado.

@Injectable()
export class FuncionarioService {
    constructor(private logService: LogService) { }
}

-> Porém, por padrão econvenção, é recomendado utilizar o @Injectable em todas as classes de serviço
-> O Angular CLI já adiciona este decorator ao criar um serviço:
$ ng g s teste --spec=false


*** 15.8. Como funciona o Injetor Hierárquico *** 
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/8981867ae80f1146cae85ffcff7f3222e471c35b

-> O injetor do Angular geralmente retorna um singleton
-> Quando declaramos o provider no app.module, na inicialização da aplicação o Angular instancia os objetos
  e registra estes objetos no Injetor raiz (root injector)
-> Qualquer componente de qualquer módulo pode receber uma instância injetada no root injector
-> Quando definimos um provider em qualquer módulo, os elementos também são registrado no root injector
-> Não existe um injetor específico para o módulo

-> Quando injetamos uma dependência em um componente, a dependência é registrada em um injetor filho que é específico do componente.
-> Se for injetado tanto no módulo como no compoente, o angular irá usar o do componente primeiro.
-> Outros componentes (componentes filohos, netos, etc) também conseguirão utilizar uma instância injetada dentro do componente pai

*** 16.1. Por que precisamos de requisições HTTP? ***
-> 

*** 16.2. Instalando e testando o json-server ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/f74c0a38c8e4683b8169f3be83f50d3c172909b2

$ npm install -g json-server

$ json-server --watch data/db.json

localhost:3000/cidades

*** 16.3. Fazendo requisição com GET e recebendo o retorno ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/a53d909477865e077cb02b75635e4511d8fa46f7

ATTENTION: Observações para a versão 8 do Angular:
1. Gerando o serviço
Como mencionado anteriormente, nas novas versões para não criarmos o arquivo de testes, usamos o parâemtro --skipTests.

$ ng g s cidade --skipTests
2. Importando módulo HttpClient
Utilizaremos o módulo HttpClient para realizarmos nossas requisições, pois o módulo Http já está depreciado desde a versão 4 do Angular.

Agora na versão 8, ele foi removido definitivamente, sendo substituído pelo módulo que iremos demonstrar agora.

No arquivo app.module.ts, iremos importar o HttpClientModule:

import { HttpClientModule } from '@angular/common/http';
E declaramos o mesmo no nosso array de imports:

imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule
]   
3. toPromise
Como mostrado na aula, foi preciso importar o operador toPromise do rxjs. Com essa versão não é mais necessário

4. Retorno do HttpClient
Usando o módulo Http, era necessário fazer o parse para json manualmente, para termos acesso ao corpo da resposta.

Com o HttpClient, isso não é mais necessário, pois ele já nos retorna o corpo em formato JSON. Precisamos então apenas realizar a chamada:

consultar(): Promise<any> {
    return this.http.get('http://localhost:3000/cidades')
      .toPromise();
}
Já no arquivo app.component.ts, teremos acesso direto a resposta:

this.cidadeService.consultar()
    .then(cidades => {
        this.cidades = cidades;
    });


*** 16.4. Fazendo requisição com POST ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/c5674f20184a555ee30b7f06db1eee35959237cd

-> O "Observable" trabalha de forma lazy, ou seja, ele só vai executar a operação quando alguém der um subscribe. 

*** 16.5. Fazendo requisição com DELETE ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/407817c1441e4bc283391614e3be8b4fa0ffc4ab

*** 16.6. Fazendo requisição com PUT ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/963f5048c89751819df1996e56fd55b18ec1db5f

*** 16.7. Tratando erros de requisições HTTP ***
Commit: https://github.com/stallone1984/algaworks-angular-meuprojeto/commit/c3bab55e43e64d0d8b6879f1b580b6218d75c4e3


*** 17.2. Criando o serviço de consulta de lançamentos ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/8dd85eba8cb3cdb4f7eb3237851c46602fc3a6cc


*** 17.3. Adicionando filtro por descrição na pesquisa de lançamentos ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/c3f8aec82ef728440a287852f5ee4c5501ffcedf

*** 17.4. Adicionando filtro por datas na pesquisa de lançamentos ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/8ff8e9a806e4e527c0cb209b033dabf9bc74dc1d

-> Instalar o moment:
$ npm install moment --save

*** 17.5. Implementando a paginação no serviço de lançamentos ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/aa100513511c39df09571b1266e4e142735ca193

*** 17.6. Configurando a paginação lazy do PrimeNG ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/dfd51db29977447f15aaa74aa61dacd936036691

*** 17.7. Desafio: criando a consulta e listagem de pessoas ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/f064833f78bfc483ea2dadbdd5b2f7ca368b1c04

*** 17.8. Excluindo lançamentos e o decorador @ViewChild ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/76bc9ae43c31e4d1a3cb2173033bd82ea56acd7a

-> Usamos o decorator @ViewChild para que o component possa referenciar algo do template:
@ViewChild('tabela', { static: true }) grid: Table

*** 17.9. Adicionando mensagem de sucesso com Angular Toasty ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/a076583dfe69ddac65799c45339ce26f1433e084

-> Para instalar o componente Toasty:
$ npm install ng2-toasty --save

ATENÇÃO!!!
-> Para o Angular 8 precisa instal também:
$ npm install --save rxjs-compat

*** 17.10. Adicionando diálogo de confirmação antes da exclusão ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/db750a66e45096a29f25004ba297c6c646090f1b

*** 17.11. Alterando o locale da aplicação para pt-BR ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/84723e0ff6f91eeadae31bc78c64f6266d4f2831

-> Em versões mais antigas:
{ provide: LOCALE_ID, useValue: 'pt-BR' }

*** 17.12. Criando um serviço de tratamento de erros ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/72c41d5dce1f6671df33d17612b84bb08f6b0799

*** 17.13. Desafio: implementando a exclusão de pessoas ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/9733a54eb13679ca93f42ad9404adb7b24f131a4

*** 17.14. Desafio: mensagem de erro de usuário na exclusão de pessoa ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/237df8c891287d7e70ca4d46689aa745f69b27e0

*** 17.15. Desafio: implementando a mudança de status de pessoas ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/103396003cad7eb5c446299564e14562b47c4794

*** 17.16. Desafio: implementando o serviço de listagem de categorias ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/ded08523b5c299d91ce27fd199639952356ce670

*** 17.17. Listando as categorias cadastradas no dropdown ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/128df04004f37ed67c3716644dfc59c94aec3ae0

*** 17.18. Desafio: listando as pessoas cadastradas no dropdown ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/33a657b08f7c738fa04adde4a86564c42e2369db

*** 17.19. Criando classes de modelo e usando no cadastro de lançamentos ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/8f0247daca6ae0f5172859a7240efa73631ed7ea

*** 17.20. Implementando o serviço de cadastro de lançamentos ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/b7b0d35e3b47c4033290d8a17b494a69b509ac5c

*** 17.21. Desafio: implementando o cadastro de pessoas ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/cfaf6836b0a1cf0a689b98438f1e524b39c7968b

*** 18.1. Introdução a rotas ***

-> O roteamento permite que o usuário possa navegar entre as views
-> Para fazer o roteamento, precisamos adicionar a tag <router-outlet>
-> Baseado na url, o RouterModule vai selecionar dinamicamente as tags que devem ser exibidas

*** 18.2. Configurando rotas na aplicação ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/7ba29dc52a7cc767c30342343a3aaca083e93869

*** 18.3. Navegando com Router Link ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/e6d3a8bfed3b7cf96d995b27f0bcdb413e9e8892

*** 18.4. Estilizando links da rota ativa *** 
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/8212112faf907dd0ac9c6bc305d30cbc114c4f57

*** 18.5. Recebendo parâmetros da rota ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/45eaa8b7cd4bd1b325e603449b935b2e88748e22

*** 18.6. Desafio: implementando os serviços de atualização e busca por código ***
Commit: https://github.com/stallone1984/algaworks-algamoney-ui/commit/a166fc9f0d3d3dc11a06998f1f714fe7a639ebd9

*** 18.7. Preenchendo os campos na edição de lançamentos ***






















  


















